# -*- coding: utf-8 -*-
"""Submission_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bQnogwvkrot5tCM4BidUkRcA-Fr7jOTz

# Import Library
"""

# import libraries
import numpy as np
import pandas as pd  # untuk manipulasi data
import matplotlib.pyplot as plt  # untuk visualisasi data
import seaborn as sns    # untuk visualisasi data
import warnings

"""# Data Understanding

Sumber : https://www.kaggle.com/datasets/nancyalaswad90/breast-cancer-dataset
"""

# import data
path = '/content/breast_cancer.csv'

# Melihat data
df = pd.read_csv(path)

df.head(5)

# Melihat berapa banyak jumlah kolom dan baris pada data
df.shape

# Melihat Info Data
df.info()

# Melihat apakah ada missing value
df.isnull().sum()

df.columns

# Melihat statistik data numerik
df.describe()

# Melihat apakah ada data yang duplikat
df.duplicated().sum()

"""Target adalah kolom diagnosis. Dengan 2 diagnosis yaitu M (Malignant)(kanker) dan B (Benign)(non-kanker)"""

df['diagnosis'].value_counts()

"""Terdapat 357 data Benign dan 212 data Malignant

# Persiapan Data
"""

# Drop kolom "id"
df.drop(columns='id', inplace=True)

df.head(3)

# Visualisasi kolom target
sns.countplot(x=df["diagnosis"], color='cyan')
plt.show()

# Visualisasi setiap kolom numerik
df.hist(figsize=(20,25), bins=15, color='blue')
plt.show()

# Mengubah M menjadi angka 1 dan B menjadi angka 0 agar mempermudah encoding
df["diagnosis"].replace(["M", "B"], [1,0], inplace=True)
df.head()

# Label Encoding
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df['diagnosis'] = le.fit_transform(df['diagnosis'])
df.head(4)

# Melihat korelasi setiap kolom
corr_matrix = df.corr()
plt.figure(figsize=(29, 18))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

"""# Training Model


"""

X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Split data untuk train dan test
from sklearn.model_selection import train_test_split

X_train, X_test,y_train,y_test = train_test_split(X,y, test_size= 0.2,random_state=42)

# Standarisasi
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""# SVM Classifier"""

#Import svm model
from sklearn import svm

#Create a svm Classifier
clf = svm.SVC(kernel='linear') # Linear Kernel

#Train the model using the training sets
clf.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

y_pred[:10]

from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, classification_report

#Print Confussion Matrix

cm = confusion_matrix(y_test, y_pred)
cm
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Benign', 'Malignant'], yticklabels=[ 'Benign', 'Malignant'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix SVM Model')
plt.show()

accuracy = accuracy_score(y_test, y_pred)
accuracy

print(classification_report(y_test,y_pred))

"""# Logistic Regression Classifier"""

from IPython.display import display

# Logistic regression
from sklearn.linear_model import LogisticRegression

log = LogisticRegression(random_state=24)

# Fit the model according to the given training data.
log.fit(X_train, y_train)

# Predict class labels for samples in X.
y_pred = log.predict(X_test)

y_pred[:10]

#Print Confussion Matrix

cm = confusion_matrix(y_test, y_pred)
cm
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Benign', 'Malignant'], yticklabels=[ 'Benign', 'Malignant'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix Logistic Regression Model')
plt.show()

accuracy = accuracy_score(y_test, y_pred)
accuracy

report = classification_report(y_test, y_pred, output_dict=True)

report_df = pd.DataFrame(report).transpose()

print(report_df)

display(report_df)

report_df["support"] = report_df["support"].astype(int)

# Membuat plot untuk tabel
fig, ax = plt.subplots(figsize=(10, 5))  # Ukuran gambar
ax.axis('tight')  # Hapus sumbu
ax.axis('off')    # Hapus sumbu
table = ax.table(
    cellText=report_df.values,
    colLabels=report_df.columns,
    rowLabels=report_df.index,
    loc='center',
    cellLoc='center'
)

# Atur ukuran font tabel
table.auto_set_font_size(False)
table.set_fontsize(10)
table.auto_set_column_width(col=list(range(len(report_df.columns))))

# Tampilkan tabel di layar
plt.show()

"""Dengan ini dapat disimpulkan bahwa model dengan akurasi terbaik adalah Logistic Regression dengan akurasi mencapai 97%

"""