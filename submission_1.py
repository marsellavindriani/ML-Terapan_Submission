# -*- coding: utf-8 -*-
"""Submission_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bQnogwvkrot5tCM4BidUkRcA-Fr7jOTz

# Domain Proyek

Proyek ini menggunakan model pembelajaran mesin untuk memprediksi diagnosis kanker payudara (jinak atau ganas) berdasarkan fitur input dari kumpulan data. Dataset ini mencakup atribut klinis utama yang dapat membantu mendeteksi kanker payudara secara dini.

## Latar Belakang
Mengapa Masalah Kanker Payudara Harus Segera Diselesaikan?
Kanker payudara merupakan penyakit dimana sel - sel payudara abnormal tumbuh diluar kendali dan membentuk tumor. Jika dibiarkan, tumor tersebut dapat menyebar ke seluruh tubuh termasuk jaringan payudara terdekat (invasi) dimana nantinya tumor akan menyebabkan benjolan dan penebalan dan berakibat fatal.

Kanker payudara menjadi jenis kanker yang menempati posisi penyumbang kematian terbesar di Indonesia, dengan angka kematian mencapai lebih dari 22 ribu jiwa. Berdasarkan data Globocan tahun 2020, jumlah kasus baru kanker payudara mencapai 68.858 kasus (16,6%) dari total 396.914 kasus baru kanker di Indonesia. [Kemenkes RI](https://sehatnegeriku.kemkes.go.id/baca/umum/20220202/1639254/kanker-payudaya-paling-banyak-di-indonesia-kemenkes-targetkan-pemerataan-layanan-kesehatan/?utm_source=chatgpt.com)

# Bussiness Understanding

Tahap ini menjelaskan proses klarifikasi masalah.

### Problem Statements
berdasarkan latar belakang diatas, berikut ini rumusan masalah yang dapat diselesaikan pada proyek ini:
1. Bagaimana cara melakukan pra-pemrosesan pada data penyakit kanker payudara yang akan digunakan untuk membuat model yang baik?
2. Fitur apa saja yang memiliki korelasi tinggi terhadap target?
3. Model Machine Learning apa yang paling efektif untuk klasifikasi data Breast Cancer ini?

### Goals
1. Mengetahui cara pra-pemrosesan dengan baik agar dapat digunakan dalam pembuatan model.
2. Mengetahui fitur apa saja yang memiliki korelasi mendekati 1 sehingga berpengaruh terhadap target.
3. Mengetahui cara membuat model machine learning untuk memprediksi penyakit kanker payudara.

### Solution Statements
Solusi yang dapat dilakukan untuk memenuhi tujuan dari proyek ini diantaranya :

Untuk pra-pemrosesan data dapat dilakukan beberapa teknik, diantaranya :
- Melakukan drop kolom pada kolom ID.
- Melakukan Encoding terhadap kolom yang bertipe object.
- Melakukan pembagian dataset menjadi dua bagian dengan rasio 80% untuk data latih dan 20% untuk data uji.
- Melakukan Standard Scaler.

- Melakukan korelasi untuk mengetahui fitur mana saja yang nilai korelasinya mendekati 1 terhadap target yang ada pada tahap EDA

- Untuk pembuatan model dipilih penggunaan model dengan algoritma SVM dan Logistic Regression. Algoritma tersebut dipilih karena mudah digunakan dan juga cocok untuk kasus ini.

# Data Understanding

Tahap ini memberikan informasi seperti jumlah data, kondisi data, dan informasi mengenai data yang digunakan, tautan sumber data (link download), dan menguraikan seluruh variabel atau fitur pada data.

| Jenis | Keterangan |
| ------ | ------ |
| Sumber | [Kaggle : Breast Cancer Dataset](https://www.kaggle.com/datasets/yasserh/breast-cancer-dataset)|
| Lisensi | CC0 : Public Domain|
| Kategori | Kesehatan|
| Jumlah data | 569 data|
"""

# import libraries
import numpy as np
import pandas as pd  # untuk manipulasi data
import matplotlib.pyplot as plt  # untuk visualisasi data
import seaborn as sns    # untuk visualisasi data
import warnings

# import data
path = '/content/breast_cancer.csv'

# Melihat data
df = pd.read_csv(path)

df.head(5)

# Melihat berapa banyak jumlah kolom dan baris pada data
df.shape

"""Terdapat 569 data dengan 32 kolom (fitur)"""

# Melihat Info Data
df.info()

"""Terdapat:
- data bertipe int64 (id)
- data bertipe object (diagnosis)
- 30 fitur lainnya memiliki tipe data float64

dan semua tipe data sudah sesuai dengan masing-masing fitur


"""

# Melihat apakah ada missing value
df.isnull().sum()

"""Tidak ada data kosong/NaN pada dataset ini"""

# Melihat fitur apa saja yang ada dalam dataset
columns = df.columns

# Melihat statistik data numerik
df.describe()

# Melihat apakah ada data yang duplikat
df.duplicated().sum()

"""Tidak ada data yang duplikat

## Exploratory Data Analysis

Melakukan eksplorasi tiap fitur yang ada pada data untuk mendapatkan insight
"""

df['diagnosis'].value_counts()

"""Target analisis data ini adalah fitur "diagnosis" yang memiliki 357 data Benign dan 212 data Malignant"""

# Visualisasi kolom target
sns.countplot(x=df["diagnosis"], color='cyan')
plt.show()

# Visualisasi setiap kolom numerik
df.hist(figsize=(20,25), bins=15, color='blue')
plt.show()

for c in columns:
  print(df[c].value_counts())
  print()

# Mengubah M menjadi angka 1 dan B menjadi angka 0 agar mempermudah encoding
df["diagnosis"].replace(["M", "B"], [1,0], inplace=True)
df.head()

# Melihat korelasi setiap kolom
corr_matrix = df.corr()
plt.figure(figsize=(29, 18))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# Melihat m=fitur mana saja yang memiliki nilai korelasi antara 0.7-1 terhadap target

cor_target = abs(corr_matrix['diagnosis'])
relevant_features =cor_target[cor_target>0.7]
relevant_features

"""Pada data understanding didapatkan insight dari melakukan EDA pada tiap fitur serta mengetahui fitur mana saja yang memiliki nilai korelasi mendekati 1 terhadap target antara lain :     
radius_mean, parameter_mean, area_mean, concave_points_mean, radius_worst, perimeter_worst, area_worst, dan convcave_points_worst.

# Data Preparation

Tahap ini dilakukan untuk mempersiapkan data untuk memasuki tahap modeling.
Adapun beberapa langkah yang dilakukan pada data preparation antara lain :    
1. drop kolom "id"
2. melakukan label encoding untuk mengurangi dimensi data
3. mendefinisikan kolom X sebagai target dan y sebagai fitur
4. split data training dan testing
5  melakukan standarisari
"""

# Drop kolom "id"
df.drop(columns='id', inplace=True)

"""Melakukan drop kolom "id" karena merupakan kolom dengan nilai unik sehingga tidak perlu digunakan pada model"""

df.head(3)

"""Tersisa 31 fitur"""

# Melakukan Label Encoding
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df['diagnosis'] = le.fit_transform(df['diagnosis'])
df.head(4)

# Mendefinisikan
# X sebagai target ("diagnosis")
# y sebagai fitur

X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Split data untuk train dan test (80:20)
from sklearn.model_selection import train_test_split

X_train, X_test,y_train,y_test = train_test_split(X,y, test_size= 0.2,random_state=42)

# Standarisasi
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""# Modeling

Melakukan modeling terhadap data dengan 2 metode klasifikasi untuk mengetahui model mana yang memiliki nilai akurasi terbaik terhadap dataset ini.
Adapun model klasifikasi yang dignakan adalah SVM Classifier dan Logistic Regression Classifier

# SVM Classifier
"""

#Import svm model
from sklearn import svm

#Create a svm Classifier
clf = svm.SVC(kernel='linear') # Linear Kernel

#Train the model using the training sets
clf.fit(X_train, y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, classification_report

#Print Confussion Matrix

cm = confusion_matrix(y_test, y_pred)
cm
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Benign', 'Malignant'], yticklabels=[ 'Benign', 'Malignant'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix SVM Model')
plt.show()

"""Hasil confussion matriks SVM Classifier adalah 68 (True Positive) 2 (False Negative) 3 (False Positive) dan 41 (True Netagive)"""

accuracy_svm = accuracy_score(y_test, y_pred)
accuracy_svm

"""Model SVM memiliki nilai akurasi sebesar 95.6 %"""

print(classification_report(y_test,y_pred))

report_svm = classification_report(y_test, y_pred, output_dict=True)

report_df = pd.DataFrame(report_svm).transpose()

display(report_df)

"""# Logistic Regression Classifier"""

from IPython.display import display

# Logistic regression
from sklearn.linear_model import LogisticRegression

log = LogisticRegression(random_state=24)

# Fit the model according to the given training data.
log.fit(X_train, y_train)

# Predict class labels for samples in X.
y_pred = log.predict(X_test)

#Print Confussion Matrix

cm = confusion_matrix(y_test, y_pred)
cm
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Benign', 'Malignant'], yticklabels=[ 'Benign', 'Malignant'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix Logistic Regression Model')
plt.show()

"""Hasil confussion matriks LogReg Classifier adalah 70 (True Positive) 2 (False Negative) 1 (False Positive) dan 41 (True Netagive)"""

accuracy_logreg = accuracy_score(y_test, y_pred)
accuracy_logreg

"""Model logistik regresi memiliki nilai akurasi sebesar 97.3%"""

report_logres = classification_report(y_test, y_pred, output_dict=True)

report_df = pd.DataFrame(report_logres).transpose()

print(report_df)

display(report_df)

"""# Evaluation"""

# Visualisasi perbandingan akurasi kedua model

report_svm = {'accuracy': 0.956}
report_logres = {'accuracy': 0.973}

compareAccuracy = {
    'SVM': report_svm['accuracy'] * 100,
    'Logistic Regression': report_logres['accuracy'] * 100
}

# Ubah dictionary menjadi DataFrame
df = pd.DataFrame(compareAccuracy, index=['Accuracy']).transpose()

# Plot bar
ax = df.plot(kind='bar', legend=False, color='skyblue', figsize=(6, 4))
plt.ylim(90, 100)  # Fokus pada rentang 90-100
plt.ylabel('Accuracy (%)')
plt.title('Comparison of Model Accuracy')

# Tambahkan nilai di atas batang
for bar in ax.patches:
    height = bar.get_height()
    ax.text(
        bar.get_x() + bar.get_width() / 2,  # Posisi x (tengah batang)
        height + 0.5,  # Posisi y (sedikit di atas batang)
        f"{height:.1f}%",  # Format nilai (misal 95.0%)
        ha='center', va='bottom', fontsize=10, color='black'
    )

plt.show()

"""Dengan ini dapat disimpulkan bahwa :    
1. Untuk pra-pemrosesan data dapat dilakukan beberapa teknik, diantaranya :
- Melakukan drop kolom pada kolom ID.
- Melakukan Encoding terhadap kolom yang bertipe object.
- Melakukan pembagian dataset menjadi dua bagian dengan rasio 80% untuk data latih dan 20% untuk data uji.
- Melakukan Standard Scaler.

2. Pada data understanding didapatkan insight dari melakukan EDA pada tiap fitur serta mengetahui fitur mana saja yang memiliki nilai korelasi mendekati 1 terhadap target antara lain :     
radius_mean, parameter_mean, area_mean, concave_points_mean, radius_worst, perimeter_worst, area_worst, dan convcave_points_worst.


3. Setelah dilakukan proses klasifikasi menggunakan model SVM dan Logistic Regression, dapat disimpulkan bahwa model dengan akurasi terbaik adalah Logistic Regression dengan akurasi mencapai 97%

"""